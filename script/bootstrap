#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

# Check if dotfiles repo is in the expected location
EXPECTED_LOCATION="$HOME/.dotfiles"
if [ "$DOTFILES_ROOT" != "$EXPECTED_LOCATION" ] && [ "$SKIP_MOVE" != "true" ]; then
  echo ''
  user "dotfiles repository detected at: $DOTFILES_ROOT"
  user "expected location: $EXPECTED_LOCATION"
  echo ''
  
  if [ "$AUTO_MOVE" == "true" ]; then
    info "automatically moving repository to ~/.dotfiles"
    move_choice="y"
  else
    user "Would you like to move the repository to ~/.dotfiles? [y/N]: "
    read -r move_choice
  fi
  
  if [[ "$move_choice" =~ ^[Yy]$ ]]; then
    if [ -e "$EXPECTED_LOCATION" ]; then
      fail "directory ~/.dotfiles already exists, please resolve manually"
    fi
    info "moving repository to ~/.dotfiles"
    mv "$DOTFILES_ROOT" "$EXPECTED_LOCATION"
    cd "$EXPECTED_LOCATION"
    DOTFILES_ROOT=$(pwd -P)
    success "repository moved to ~/.dotfiles"
  else
    user "continuing with current location: $DOTFILES_ROOT"
  fi
  echo ''
fi

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    # Use provided flags or prompt for git author info
    if [ -n "$GIT_AUTHOR_NAME" ]; then
      git_authorname="$GIT_AUTHOR_NAME"
      info "using provided git author name: $git_authorname"
    else
      user ' - What is your github author name?'
      read -e git_authorname
    fi
    
    if [ -n "$GIT_AUTHOR_EMAIL" ]; then
      git_authoremail="$GIT_AUTHOR_EMAIL"
      info "using provided git author email: $git_authoremail"
    else
      user ' - What is your github author email?'
      read -e git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

setup_git_signing () {
  if [ "$(uname -s)" == "Darwin" ]; then
    info 'setup git signing'
    
    local signing_mode="$GIT_SIGNING_MODE"
    
    # If not set by flag, prompt user
    if [ -z "$signing_mode" ]; then
      echo ''
      echo '  How do you want to configure Git signing?'
      echo '  [1] Local 1Password (1Password installed on this machine)'
      echo '  [2] Remote 1Password (SSH into a machine with 1Password)'
      echo '  [3] Skip git signing setup'
      echo ''
      user ' - Choose signing method [1-3]: '
      read -n 1 -r signing_choice
      echo

      case "$signing_choice" in
        1) signing_mode="local" ;;
        2) signing_mode="remote" ;;
        3) signing_mode="skip" ;;
        *) signing_mode="skip"; info "invalid choice, skipping git signing setup" ;;
      esac
    fi

    case "$signing_mode" in
      local)
        # Local 1Password setup
        if [ ! -d "/Applications/1Password.app" ]; then
          user "1Password not found locally. Install 1Password first, then run bootstrap again."
          return
        fi

        if [ ! -S "$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock" ]; then
          user "Enable SSH agent in 1Password: Developer Settings → SSH Agent → Use the SSH agent"
          user "Then restart your terminal and run bootstrap again."
          return
        fi

        # Add SSH_AUTH_SOCK to ~/.localrc
        if [ ! -f "$HOME/.localrc" ]; then
          touch "$HOME/.localrc"
        fi
        
        if ! grep -q "SSH_AUTH_SOCK.*1password" "$HOME/.localrc"; then
          echo "" >> "$HOME/.localrc"
          echo "# 1Password SSH Agent for Git Signing (Local)" >> "$HOME/.localrc"
          echo 'export SSH_AUTH_SOCK="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"' >> "$HOME/.localrc"
          success "configured for local 1Password signing"
        else
          success "local 1Password signing already configured"
        fi
        ;;
        
      remote)
        # Remote 1Password setup - no local config needed
        success "configured for remote 1Password signing"
        info "use 'ssh -A user@host' to forward SSH agent for signing"
        info "ensure the remote machine has 1Password SSH agent configured"
        ;;
        
      skip)
        info "skipping git signing setup"
        ;;
    esac
  fi
}

setup_installation_type () {
  echo ''
  info 'setup installation type'
  echo ''
  echo '  [1] Essential setup (CLI tools only) - for servers, remote machines'
  echo '  [2] Workstation setup (essentials + GUI apps) - for local development'
  echo ''
  user ' - Choose installation type [1-2]: '
  read -n 1 -r install_choice
  echo
  
  case "$install_choice" in
    1)
      INSTALL_TYPE=""
      info "essential setup selected (CLI tools only)"
      ;;
    2)
      INSTALL_TYPE="--workstation" 
      info "workstation setup selected (essentials + GUI applications)"
      ;;
    *)
      info "invalid choice, defaulting to essential setup"
      INSTALL_TYPE=""
      ;;
  esac
}

# Parse command line arguments
INSTALL_TYPE=""
OVERWRITE_ALL=false
SKIP_ALL=false
BACKUP_ALL=false
INSTALL_TYPE_SET_BY_FLAG=false
AUTO_MOVE=false
SKIP_MOVE=false
GIT_AUTHOR_NAME=""
GIT_AUTHOR_EMAIL=""
GIT_SIGNING_MODE=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --essential)
      INSTALL_TYPE=""
      INSTALL_TYPE_SET_BY_FLAG=true
      info "essential setup selected (CLI tools only)"
      shift
      ;;
    --workstation)
      INSTALL_TYPE="--workstation"
      INSTALL_TYPE_SET_BY_FLAG=true
      info "workstation setup selected (essentials + GUI applications)"
      shift
      ;;
    --overwrite-all)
      OVERWRITE_ALL=true
      shift
      ;;
    --skip-all)
      SKIP_ALL=true
      shift
      ;;
    --backup-all)
      BACKUP_ALL=true
      shift
      ;;
    --auto-move)
      AUTO_MOVE=true
      shift
      ;;
    --skip-move)
      SKIP_MOVE=true
      shift
      ;;
    --git-name)
      GIT_AUTHOR_NAME="$2"
      shift 2
      ;;
    --git-email)
      GIT_AUTHOR_EMAIL="$2"
      shift 2
      ;;
    --git-signing-local)
      GIT_SIGNING_MODE="local"
      shift
      ;;
    --git-signing-remote)
      GIT_SIGNING_MODE="remote"
      shift
      ;;
    --git-signing-skip)
      GIT_SIGNING_MODE="skip"
      shift
      ;;
    --help|-h)
      echo "Usage: $0 [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --essential            Essential setup (CLI tools only)"
      echo "  --workstation          Workstation setup (essentials + GUI apps)"
      echo "  --overwrite-all        Overwrite all existing files without prompting"
      echo "  --skip-all             Skip all existing files without prompting"
      echo "  --backup-all           Backup all existing files without prompting"
      echo "  --auto-move            Automatically move repo to ~/.dotfiles if needed"
      echo "  --skip-move            Skip repository location check entirely"
      echo "  --git-name NAME        Set git author name (skips prompt)"
      echo "  --git-email EMAIL      Set git author email (skips prompt)"
      echo "  --git-signing-local    Configure for local 1Password signing"
      echo "  --git-signing-remote   Configure for remote 1Password signing"
      echo "  --git-signing-skip     Skip git signing setup"
      echo "  --help, -h             Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    # Use command-line flags if provided
    if [ "$OVERWRITE_ALL" == "true" ]; then
      overwrite=true
    elif [ "$SKIP_ALL" == "true" ]; then
      skip=true
    elif [ "$BACKUP_ALL" == "true" ]; then
      backup=true
    elif [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

# Only prompt for installation type if not set by flag
if [ "$INSTALL_TYPE_SET_BY_FLAG" == "false" ]; then
  setup_installation_type
fi

setup_gitconfig
setup_git_signing
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  # Export INSTALL_TYPE so it can be used by script/install
  export INSTALL_TYPE
  if source script/install $INSTALL_TYPE | tee /tmp/dotfiles-dot
  then
    success "dependencies installed, log at /tmp/dotfiles-dot"
  else
    fail "error installing dependencies, log at /tmp/dotfiles-dot"
  fi
fi

echo ''
echo '  Doing a safety check'
# safety-check

echo ''
echo '  All installed!'
